AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy python lambda

Parameters:
  Revision:
    Type: String
    Description: The commit that originated this deployment. Helps trigger new deploys to the lambda.

Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}"
      Handler: apps.service.src.lambda_function.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        S3Bucket: email-sender-service-bucket
        S3Key: !Sub "${Revision}.zip"
      Environment:
        Variables:
          QUEUE_URL: !ImportValue "email-sender-service-sqs-url-export"
          QUEUE_NAME: !ImportValue "email-sender-service-sqs-name-export"
          TABLE_NAME: !ImportValue "email-sender-service-table-name-export"
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Layers:
        - !Ref LambdaLayer

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaBasicExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DeleteTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'sqs:SendMessage'
                Resource: '*'

  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-${Revision}"
      CompatibleRuntimes:
        - python3.10
      Content:
        S3Bucket: email-sender-service-bucket
        S3Key: dependencies.zip

Outputs:
  LambdaName:
    Description: Name of the lambda
    Value: !Ref MyLambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-export"